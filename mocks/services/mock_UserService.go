// Code generated by mockery v2.46.3. DO NOT EDIT.

package services

import (
	context "context"

	rest "github.com/rosaekapratama/mnc-go-test2/models/rest"
	mock "github.com/stretchr/testify/mock"
)

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, req
func (_m *MockUserService) Login(ctx context.Context, req *rest.LoginRequest) (*rest.BaseResponse[*rest.LoginResponse], error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *rest.BaseResponse[*rest.LoginResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rest.LoginRequest) (*rest.BaseResponse[*rest.LoginResponse], error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rest.LoginRequest) *rest.BaseResponse[*rest.LoginResponse]); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.BaseResponse[*rest.LoginResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rest.LoginRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockUserService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - req *rest.LoginRequest
func (_e *MockUserService_Expecter) Login(ctx interface{}, req interface{}) *MockUserService_Login_Call {
	return &MockUserService_Login_Call{Call: _e.mock.On("Login", ctx, req)}
}

func (_c *MockUserService_Login_Call) Run(run func(ctx context.Context, req *rest.LoginRequest)) *MockUserService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*rest.LoginRequest))
	})
	return _c
}

func (_c *MockUserService_Login_Call) Return(res *rest.BaseResponse[*rest.LoginResponse], err error) *MockUserService_Login_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockUserService_Login_Call) RunAndReturn(run func(context.Context, *rest.LoginRequest) (*rest.BaseResponse[*rest.LoginResponse], error)) *MockUserService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, req
func (_m *MockUserService) Register(ctx context.Context, req *rest.RegisterRequest) (*rest.BaseResponse[*rest.RegisterResponse], error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *rest.BaseResponse[*rest.RegisterResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rest.RegisterRequest) (*rest.BaseResponse[*rest.RegisterResponse], error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rest.RegisterRequest) *rest.BaseResponse[*rest.RegisterResponse]); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.BaseResponse[*rest.RegisterResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rest.RegisterRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockUserService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - req *rest.RegisterRequest
func (_e *MockUserService_Expecter) Register(ctx interface{}, req interface{}) *MockUserService_Register_Call {
	return &MockUserService_Register_Call{Call: _e.mock.On("Register", ctx, req)}
}

func (_c *MockUserService_Register_Call) Run(run func(ctx context.Context, req *rest.RegisterRequest)) *MockUserService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*rest.RegisterRequest))
	})
	return _c
}

func (_c *MockUserService_Register_Call) Return(res *rest.BaseResponse[*rest.RegisterResponse], err error) *MockUserService_Register_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockUserService_Register_Call) RunAndReturn(run func(context.Context, *rest.RegisterRequest) (*rest.BaseResponse[*rest.RegisterResponse], error)) *MockUserService_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
