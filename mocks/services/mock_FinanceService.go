// Code generated by mockery v2.46.3. DO NOT EDIT.

package services

import (
	context "context"

	rest "github.com/rosaekapratama/mnc-go-test2/models/rest"
	mock "github.com/stretchr/testify/mock"
)

// MockFinanceService is an autogenerated mock type for the FinanceService type
type MockFinanceService struct {
	mock.Mock
}

type MockFinanceService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFinanceService) EXPECT() *MockFinanceService_Expecter {
	return &MockFinanceService_Expecter{mock: &_m.Mock}
}

// FindAllTransaction provides a mock function with given fields: ctx
func (_m *MockFinanceService) FindAllTransaction(ctx context.Context) (*rest.BaseResponse[*[]*rest.TransactionDetailResponse], error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAllTransaction")
	}

	var r0 *rest.BaseResponse[*[]*rest.TransactionDetailResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*rest.BaseResponse[*[]*rest.TransactionDetailResponse], error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *rest.BaseResponse[*[]*rest.TransactionDetailResponse]); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.BaseResponse[*[]*rest.TransactionDetailResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFinanceService_FindAllTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllTransaction'
type MockFinanceService_FindAllTransaction_Call struct {
	*mock.Call
}

// FindAllTransaction is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockFinanceService_Expecter) FindAllTransaction(ctx interface{}) *MockFinanceService_FindAllTransaction_Call {
	return &MockFinanceService_FindAllTransaction_Call{Call: _e.mock.On("FindAllTransaction", ctx)}
}

func (_c *MockFinanceService_FindAllTransaction_Call) Run(run func(ctx context.Context)) *MockFinanceService_FindAllTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockFinanceService_FindAllTransaction_Call) Return(res *rest.BaseResponse[*[]*rest.TransactionDetailResponse], err error) *MockFinanceService_FindAllTransaction_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockFinanceService_FindAllTransaction_Call) RunAndReturn(run func(context.Context) (*rest.BaseResponse[*[]*rest.TransactionDetailResponse], error)) *MockFinanceService_FindAllTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// Payment provides a mock function with given fields: ctx, req
func (_m *MockFinanceService) Payment(ctx context.Context, req *rest.PaymentRequest) (*rest.BaseResponse[*rest.PaymentResponse], error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Payment")
	}

	var r0 *rest.BaseResponse[*rest.PaymentResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rest.PaymentRequest) (*rest.BaseResponse[*rest.PaymentResponse], error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rest.PaymentRequest) *rest.BaseResponse[*rest.PaymentResponse]); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.BaseResponse[*rest.PaymentResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rest.PaymentRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFinanceService_Payment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Payment'
type MockFinanceService_Payment_Call struct {
	*mock.Call
}

// Payment is a helper method to define mock.On call
//   - ctx context.Context
//   - req *rest.PaymentRequest
func (_e *MockFinanceService_Expecter) Payment(ctx interface{}, req interface{}) *MockFinanceService_Payment_Call {
	return &MockFinanceService_Payment_Call{Call: _e.mock.On("Payment", ctx, req)}
}

func (_c *MockFinanceService_Payment_Call) Run(run func(ctx context.Context, req *rest.PaymentRequest)) *MockFinanceService_Payment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*rest.PaymentRequest))
	})
	return _c
}

func (_c *MockFinanceService_Payment_Call) Return(res *rest.BaseResponse[*rest.PaymentResponse], err error) *MockFinanceService_Payment_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockFinanceService_Payment_Call) RunAndReturn(run func(context.Context, *rest.PaymentRequest) (*rest.BaseResponse[*rest.PaymentResponse], error)) *MockFinanceService_Payment_Call {
	_c.Call.Return(run)
	return _c
}

// Topup provides a mock function with given fields: ctx, req
func (_m *MockFinanceService) Topup(ctx context.Context, req *rest.TopupRequest) (*rest.BaseResponse[*rest.TopUpResponse], error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Topup")
	}

	var r0 *rest.BaseResponse[*rest.TopUpResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rest.TopupRequest) (*rest.BaseResponse[*rest.TopUpResponse], error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rest.TopupRequest) *rest.BaseResponse[*rest.TopUpResponse]); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.BaseResponse[*rest.TopUpResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rest.TopupRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFinanceService_Topup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Topup'
type MockFinanceService_Topup_Call struct {
	*mock.Call
}

// Topup is a helper method to define mock.On call
//   - ctx context.Context
//   - req *rest.TopupRequest
func (_e *MockFinanceService_Expecter) Topup(ctx interface{}, req interface{}) *MockFinanceService_Topup_Call {
	return &MockFinanceService_Topup_Call{Call: _e.mock.On("Topup", ctx, req)}
}

func (_c *MockFinanceService_Topup_Call) Run(run func(ctx context.Context, req *rest.TopupRequest)) *MockFinanceService_Topup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*rest.TopupRequest))
	})
	return _c
}

func (_c *MockFinanceService_Topup_Call) Return(res *rest.BaseResponse[*rest.TopUpResponse], err error) *MockFinanceService_Topup_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockFinanceService_Topup_Call) RunAndReturn(run func(context.Context, *rest.TopupRequest) (*rest.BaseResponse[*rest.TopUpResponse], error)) *MockFinanceService_Topup_Call {
	_c.Call.Return(run)
	return _c
}

// Transfer provides a mock function with given fields: ctx, req
func (_m *MockFinanceService) Transfer(ctx context.Context, req *rest.TransferRequest) (*rest.BaseResponse[*rest.TransferResponse], error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Transfer")
	}

	var r0 *rest.BaseResponse[*rest.TransferResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rest.TransferRequest) (*rest.BaseResponse[*rest.TransferResponse], error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rest.TransferRequest) *rest.BaseResponse[*rest.TransferResponse]); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.BaseResponse[*rest.TransferResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rest.TransferRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFinanceService_Transfer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transfer'
type MockFinanceService_Transfer_Call struct {
	*mock.Call
}

// Transfer is a helper method to define mock.On call
//   - ctx context.Context
//   - req *rest.TransferRequest
func (_e *MockFinanceService_Expecter) Transfer(ctx interface{}, req interface{}) *MockFinanceService_Transfer_Call {
	return &MockFinanceService_Transfer_Call{Call: _e.mock.On("Transfer", ctx, req)}
}

func (_c *MockFinanceService_Transfer_Call) Run(run func(ctx context.Context, req *rest.TransferRequest)) *MockFinanceService_Transfer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*rest.TransferRequest))
	})
	return _c
}

func (_c *MockFinanceService_Transfer_Call) Return(res *rest.BaseResponse[*rest.TransferResponse], err error) *MockFinanceService_Transfer_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockFinanceService_Transfer_Call) RunAndReturn(run func(context.Context, *rest.TransferRequest) (*rest.BaseResponse[*rest.TransferResponse], error)) *MockFinanceService_Transfer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFinanceService creates a new instance of MockFinanceService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFinanceService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFinanceService {
	mock := &MockFinanceService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
