// Code generated by mockery v2.46.3. DO NOT EDIT.

package repositories

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	repo "github.com/rosaekapratama/mnc-go-test2/models/repo"

	uuid "github.com/google/uuid"
)

// MockTransactionRepository is an autogenerated mock type for the TransactionRepository type
type MockTransactionRepository struct {
	mock.Mock
}

type MockTransactionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionRepository) EXPECT() *MockTransactionRepository_Expecter {
	return &MockTransactionRepository_Expecter{mock: &_m.Mock}
}

// FindAllByUserId provides a mock function with given fields: ctx, userId
func (_m *MockTransactionRepository) FindAllByUserId(ctx context.Context, userId uuid.UUID) ([]*repo.TransactionDetail, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for FindAllByUserId")
	}

	var r0 []*repo.TransactionDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*repo.TransactionDetail, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*repo.TransactionDetail); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repo.TransactionDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionRepository_FindAllByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllByUserId'
type MockTransactionRepository_FindAllByUserId_Call struct {
	*mock.Call
}

// FindAllByUserId is a helper method to define mock.On call
//   - ctx context.Context
//   - userId uuid.UUID
func (_e *MockTransactionRepository_Expecter) FindAllByUserId(ctx interface{}, userId interface{}) *MockTransactionRepository_FindAllByUserId_Call {
	return &MockTransactionRepository_FindAllByUserId_Call{Call: _e.mock.On("FindAllByUserId", ctx, userId)}
}

func (_c *MockTransactionRepository_FindAllByUserId_Call) Run(run func(ctx context.Context, userId uuid.UUID)) *MockTransactionRepository_FindAllByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockTransactionRepository_FindAllByUserId_Call) Return(transactionList []*repo.TransactionDetail, err error) *MockTransactionRepository_FindAllByUserId_Call {
	_c.Call.Return(transactionList, err)
	return _c
}

func (_c *MockTransactionRepository_FindAllByUserId_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*repo.TransactionDetail, error)) *MockTransactionRepository_FindAllByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, tx, transaction
func (_m *MockTransactionRepository) Save(ctx context.Context, tx *gorm.DB, transaction *repo.Transaction) error {
	ret := _m.Called(ctx, tx, transaction)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *repo.Transaction) error); ok {
		r0 = rf(ctx, tx, transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransactionRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockTransactionRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *gorm.DB
//   - transaction *repo.Transaction
func (_e *MockTransactionRepository_Expecter) Save(ctx interface{}, tx interface{}, transaction interface{}) *MockTransactionRepository_Save_Call {
	return &MockTransactionRepository_Save_Call{Call: _e.mock.On("Save", ctx, tx, transaction)}
}

func (_c *MockTransactionRepository_Save_Call) Run(run func(ctx context.Context, tx *gorm.DB, transaction *repo.Transaction)) *MockTransactionRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*gorm.DB), args[2].(*repo.Transaction))
	})
	return _c
}

func (_c *MockTransactionRepository_Save_Call) Return(err error) *MockTransactionRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransactionRepository_Save_Call) RunAndReturn(run func(context.Context, *gorm.DB, *repo.Transaction) error) *MockTransactionRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransactionRepository creates a new instance of MockTransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionRepository {
	mock := &MockTransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
