// Code generated by mockery v2.46.3. DO NOT EDIT.

package v1

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// MockFinanceRestController is an autogenerated mock type for the FinanceRestController type
type MockFinanceRestController struct {
	mock.Mock
}

type MockFinanceRestController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFinanceRestController) EXPECT() *MockFinanceRestController_Expecter {
	return &MockFinanceRestController_Expecter{mock: &_m.Mock}
}

// Payment provides a mock function with given fields: c
func (_m *MockFinanceRestController) Payment(c *gin.Context) {
	_m.Called(c)
}

// MockFinanceRestController_Payment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Payment'
type MockFinanceRestController_Payment_Call struct {
	*mock.Call
}

// Payment is a helper method to define mock.On call
//   - c *gin.Context
func (_e *MockFinanceRestController_Expecter) Payment(c interface{}) *MockFinanceRestController_Payment_Call {
	return &MockFinanceRestController_Payment_Call{Call: _e.mock.On("Payment", c)}
}

func (_c *MockFinanceRestController_Payment_Call) Run(run func(c *gin.Context)) *MockFinanceRestController_Payment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockFinanceRestController_Payment_Call) Return() *MockFinanceRestController_Payment_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockFinanceRestController_Payment_Call) RunAndReturn(run func(*gin.Context)) *MockFinanceRestController_Payment_Call {
	_c.Call.Return(run)
	return _c
}

// Topup provides a mock function with given fields: c
func (_m *MockFinanceRestController) Topup(c *gin.Context) {
	_m.Called(c)
}

// MockFinanceRestController_Topup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Topup'
type MockFinanceRestController_Topup_Call struct {
	*mock.Call
}

// Topup is a helper method to define mock.On call
//   - c *gin.Context
func (_e *MockFinanceRestController_Expecter) Topup(c interface{}) *MockFinanceRestController_Topup_Call {
	return &MockFinanceRestController_Topup_Call{Call: _e.mock.On("Topup", c)}
}

func (_c *MockFinanceRestController_Topup_Call) Run(run func(c *gin.Context)) *MockFinanceRestController_Topup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockFinanceRestController_Topup_Call) Return() *MockFinanceRestController_Topup_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockFinanceRestController_Topup_Call) RunAndReturn(run func(*gin.Context)) *MockFinanceRestController_Topup_Call {
	_c.Call.Return(run)
	return _c
}

// Transactions provides a mock function with given fields: c
func (_m *MockFinanceRestController) Transactions(c *gin.Context) {
	_m.Called(c)
}

// MockFinanceRestController_Transactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transactions'
type MockFinanceRestController_Transactions_Call struct {
	*mock.Call
}

// Transactions is a helper method to define mock.On call
//   - c *gin.Context
func (_e *MockFinanceRestController_Expecter) Transactions(c interface{}) *MockFinanceRestController_Transactions_Call {
	return &MockFinanceRestController_Transactions_Call{Call: _e.mock.On("Transactions", c)}
}

func (_c *MockFinanceRestController_Transactions_Call) Run(run func(c *gin.Context)) *MockFinanceRestController_Transactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockFinanceRestController_Transactions_Call) Return() *MockFinanceRestController_Transactions_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockFinanceRestController_Transactions_Call) RunAndReturn(run func(*gin.Context)) *MockFinanceRestController_Transactions_Call {
	_c.Call.Return(run)
	return _c
}

// Transfer provides a mock function with given fields: c
func (_m *MockFinanceRestController) Transfer(c *gin.Context) {
	_m.Called(c)
}

// MockFinanceRestController_Transfer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transfer'
type MockFinanceRestController_Transfer_Call struct {
	*mock.Call
}

// Transfer is a helper method to define mock.On call
//   - c *gin.Context
func (_e *MockFinanceRestController_Expecter) Transfer(c interface{}) *MockFinanceRestController_Transfer_Call {
	return &MockFinanceRestController_Transfer_Call{Call: _e.mock.On("Transfer", c)}
}

func (_c *MockFinanceRestController_Transfer_Call) Run(run func(c *gin.Context)) *MockFinanceRestController_Transfer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockFinanceRestController_Transfer_Call) Return() *MockFinanceRestController_Transfer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockFinanceRestController_Transfer_Call) RunAndReturn(run func(*gin.Context)) *MockFinanceRestController_Transfer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFinanceRestController creates a new instance of MockFinanceRestController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFinanceRestController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFinanceRestController {
	mock := &MockFinanceRestController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
